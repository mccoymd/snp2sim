args = commandArgs(trailingOnly = TRUE)
if(length(args) == 0){
table <- fread(file = "clusterres_dihedaral_pca_coords.csv", sep = ",", data.table = FALSE, header = TRUE)
} else {
table <- fread(file = args[1], sep = ",", data.table = FALSE, header = TRUE)
}
library(data.table)
library(ggplot2)
library(Rtsne)
library(plotly)
library(plyr)
library(htmlwidgets)
library(markovchain)
args = commandArgs(trailingOnly = TRUE)
if(length(args) == 0){
table <- fread(file = "clusterres_dihedaral_pca_coords.csv", sep = ",", data.table = FALSE, header = TRUE)
} else {
table <- fread(file = args[1], sep = ",", data.table = FALSE, header = TRUE)
}
table <- table[,colSums(table != 0) > 0]
if (length(args) > 0) {
outputDir = paste(args[2],"/",sep = "")
} else {
outputDir = ""
}
pca <- prcomp(table[,c(-1)], scale. = TRUE)
#pull pca and add cluster
pca_vals <- as.data.frame(pca$x)
#get 90% variance pca number
summary <- data.frame(summary(pca)$importance)
cumsum <- as.vector(summary[3,])
numpca <- length(cumsum[cumsum<.9])
#run k means on the 90% pcas and plot
#k <- kmeans(pca_vals[,c(1:numpca)], 3, nstart=25, iter.max=1000)
pamk <- pamk(pca_vals[,c(1:numpca)], krange = 3:10, usepam = FALSE)
library(fpc)
library(data.table)
library(ggplot2)
library(plotly)
library(htmlwidgets)
library(fpc)
library(markovchain)
args = commandArgs(trailingOnly = TRUE)
if(length(args) == 0){
table <- fread(file = "clusterres_dihedaral_pca_coords.csv", sep = ",", data.table = FALSE, header = TRUE)
} else {
table <- fread(file = args[1], sep = ",", data.table = FALSE, header = TRUE)
}
table <- table[,colSums(table != 0) > 0]
if (length(args) > 0) {
outputDir = paste(args[2],"/",sep = "")
} else {
outputDir = ""
}
pca <- prcomp(table[,c(-1)], scale. = TRUE)
table <- table[,colSums(table != 0) > 0]
table <- fread(file = "clusterres_dihedaral_pca_coords.csv", sep = ",", data.table = FALSE, header = TRUE)
table <- fread(file = "../../../pca/clusterres_dihedaral_pca_coords.csv", sep = ",", data.table = FALSE, header = TRUE)
table <- table[,colSums(table != 0) > 0]
if (length(args) > 0) {
outputDir = paste(args[2],"/",sep = "")
} else {
outputDir = ""
}
pca <- prcomp(table[,c(-1)], scale. = TRUE)
#pull pca and add cluster
pca_vals <- as.data.frame(pca$x)
#get 90% variance pca number
summary <- data.frame(summary(pca)$importance)
cumsum <- as.vector(summary[3,])
numpca <- length(cumsum[cumsum<.9])
#run k means on the 90% pcas and plot
#k <- kmeans(pca_vals[,c(1:numpca)], 3, nstart=25, iter.max=1000)
pamk <- pamk(pca_vals[,c(1:numpca)], krange = 3:10, usepam = FALSE)
pca_vals$pamk <- as.factor(pamk$pamobject$clustering)
x <- pamk$pamobject$clustering
trans <- markovchainFit(x)
clusters <- data.frame(frame = c(1:nrow(pamk$pamobject$clustering)), cluster = pamk$pamobject$clustering)
nrow(pamk$pamobject$clustering)
length(pamk$pamobject$clustering)
args <- c("/Users/vikram/Documents/georgetown/summer_2019/run_workflow/snp2simresults/variantSimulations/PDL1/config/PDL1.82K.pdl_scaff_1.featureTable.csv", "~")
library(data.table)
library(ggplot2)
library(plotly)
library(htmlwidgets)
library(fpc)
library(markovchain)
if(length(args) == 0){
table <- fread(file = "clusterres_dihedaral_pca_coords.csv", sep = ",", data.table = FALSE, header = TRUE)
} else {
table <- fread(file = args[1], sep = ",", data.table = FALSE, header = TRUE)
}
table <- table[,colSums(table != 0) > 0]
if (length(args) > 0) {
outputDir = paste(args[2],"/",sep = "")
} else {
outputDir = ""
}
pca <- prcomp(table[,c(-1)], scale. = TRUE)
#pull pca and add cluster
pca_vals <- as.data.frame(pca$x)
#get 90% variance pca number
summary <- data.frame(summary(pca)$importance)
cumsum <- as.vector(summary[3,])
numpca <- length(cumsum[cumsum<.9])
#run k means on the 90% pcas and plot
#k <- kmeans(pca_vals[,c(1:numpca)], 3, nstart=25, iter.max=1000)
pamk <- pamk(pca_vals[,c(1:numpca)], krange = 1:10, usepam = FALSE)
pca_vals$pamk <- as.factor(pamk$pamobject$clustering)
View(pamk)
x <- pamk$pamobject$clustering
trans <- markovchainFit(x)
mc <- new("markovchain", states = trans$estimate@states, transitionMatrix = trans$estimate@transitionMatrix, name = "traj")
mcss <- as.data.frame(cbind(trans$estimate@states,t(steadyStates(mc))))
mcss[,1] <- as.factor(mcss[,1])
colnames(mcss) <- c("Cluster", "Steady State Probabilities")
args <- c("/Users/vikram/Documents/georgetown/summer_2019/tree_sampling/variantSimulations/PDL1/config/PDL1.100V.0.featureTable.csv")
library(data.table)
library(ggplot2)
library(plotly)
library(htmlwidgets)
library(fpc)
library(markovchain)
if(length(args) == 0){
table <- fread(file = "clusterres_dihedaral_pca_coords.csv", sep = ",", data.table = FALSE, header = TRUE)
} else {
table <- fread(file = args[1], sep = ",", data.table = FALSE, header = TRUE)
}
table <- table[,colSums(table != 0) > 0]
pca <- prcomp(table[,c(-1)], scale. = TRUE)
#pull pca and add cluster
pca_vals <- as.data.frame(pca$x)
View(pca_vals)
#get 90% variance pca number
summary <- data.frame(summary(pca)$importance)
cumsum <- as.vector(summary[3,])
numpca <- length(cumsum[cumsum<.9])
View(pca)
View(summary)
View(cumsum)
library(data.table)
library(ggplot2)
library(plotly)
library(htmlwidgets)
library(fpc)
library(markovchain)
args = commandArgs(trailingOnly = TRUE)
args <- c("/Users/vikram/Documents/georgetown/summer_2019/tree_sampling/variantSimulations/PDL1/config/PDL1.100V.0.featureTable.csv")
if(length(args) == 0){
table <- fread(file = "clusterres_dihedaral_pca_coords.csv", sep = ",", data.table = FALSE, header = TRUE)
} else {
table <- fread(file = args[1], sep = ",", data.table = FALSE, header = TRUE)
}
table <- table[,colSums(table != 0) > 0]
pca <- prcomp(table[,c(-1)], scale. = TRUE)
#pull pca and add cluster
pca_vals <- as.data.frame(pca$x)
#get 90% variance pca number
if(ncol(pca_vals) < 4) {
summary <- data.frame(summary(pca)$importance)
cumsum <- as.vector(summary[3,])
numpca <- length(cumsum[cumsum<.9])
}
#run k means on the 90% pcas and plot
#k <- kmeans(pca_vals[,c(1:numpca)], 3, nstart=25, iter.max=1000)
if (length(table[,1]) < 11) {
pamk <- pamk(pca_vals[,c(1:numpca)], krange = 1:length(table[,1]), usepam = FALSE)
} else {
pamk <- pamk(pca_vals[,c(1:numpca)], krange = 1:10, usepam = FALSE)
}
length(table[,1])
nrow(table)
#run k means on the 90% pcas and plot
#k <- kmeans(pca_vals[,c(1:numpca)], 3, nstart=25, iter.max=1000)
if (nrow(table) < 11) {
pamk <- pamk(pca_vals[,c(1:numpca)], krange = 1:nrow(table) - 1, usepam = FALSE)
} else {
pamk <- pamk(pca_vals[,c(1:numpca)], krange = 1:10, usepam = FALSE)
}
pamk <- pamk(pca_vals[,c(1:numpca)], krange = 1:nrow(table) - 1, usepam = FALSE)
pamk <- pamk(pca_vals[,c(1:numpca)], krange = 1:(nrow(table) - 1), usepam = FALSE)
1:(nrow(table) - 1)
nrow(table) - 1
1:1
1:2
1:11
1:1
pamk <- pamk(pca_vals[,c(1:numpca)], krange = 1:(nrow(table) - 1), usepam = TRUE)
pamk <- pamk(pca_vals[,c(1:numpca)], krange = 1:(nrow(table) - 1), usepam = TRUE)
pamk <- pamk(pca_vals[,c(1:numpca)], krange = 1:10, usepam = FALSE)
pamk <- pamk(pca_vals[,c(1:numpca)], krange = 1:(nrow(table) - 1), usepam = TRUE)
#run k means on the 90% pcas and plot
#k <- kmeans(pca_vals[,c(1:numpca)], 3, nstart=25, iter.max=1000)
if (nrow(table) < 11) {
pamk <- pamk(pca_vals[,c(1:numpca)], krange = 1:(nrow(table) - 1), usepam = TRUE)
} else {
pamk <- pamk(pca_vals[,c(1:numpca)], krange = 1:10, usepam = FALSE)
}
#get 90% variance pca number
if(ncol(pca_vals) < 4) {
summary <- data.frame(summary(pca)$importance)
cumsum <- as.vector(summary[3,])
numpca <- length(cumsum[cumsum<.9])
} else {
numpca <- ncol(pca_vals)
}
#run k means on the 90% pcas and plot
#k <- kmeans(pca_vals[,c(1:numpca)], 3, nstart=25, iter.max=1000)
if (nrow(table) < 11) {
pamk <- pamk(pca_vals[,c(1:numpca)], krange = 1:(nrow(table) - 1), usepam = TRUE)
} else {
pamk <- pamk(pca_vals[,c(1:numpca)], krange = 1:10, usepam = FALSE)
}
numpca <- ncol(pca_vals)
#get 90% variance pca number
if(ncol(pca_vals) > 4) {
summary <- data.frame(summary(pca)$importance)
cumsum <- as.vector(summary[3,])
numpca <- length(cumsum[cumsum<.9])
} else {
numpca <- ncol(pca_vals)
}
#run k means on the 90% pcas and plot
#k <- kmeans(pca_vals[,c(1:numpca)], 3, nstart=25, iter.max=1000)
if (nrow(table) < 11) {
pamk <- pamk(pca_vals[,c(1:numpca)], krange = 1:(nrow(table) - 1), usepam = TRUE)
} else {
pamk <- pamk(pca_vals[,c(1:numpca)], krange = 1:10, usepam = FALSE)
}
numpca <- ncol(pca_vals)
#get 90% variance pca number
if(ncol(pca_vals) > 4) {
summary <- data.frame(summary(pca)$importance)
cumsum <- as.vector(summary[3,])
numpca <- length(cumsum[cumsum<.9])
} else {
numpca <- ncol(pca_vals)
}
pamk <- pamk(pca_vals[,c(1:numpca)], krange = 1:(nrow(table) - 1), usepam = TRUE)
pca_vals[,c(1:numpca)]
1:(nrow(table) - 1)
pamk <- pamk(pca_vals[,c(1:numpca)], krange = 1:(nrow(pca_vals) - 1), usepam = TRUE)
#run k means on the 90% pcas and plot
#k <- kmeans(pca_vals[,c(1:numpca)], 3, nstart=25, iter.max=1000)
if (nrow(pca_vals) < 3) {
pca_vals$pamk <- as.factor(rep(1, nrow(pca_vals)))
} else if (nrow(pca_vals) < 11) {
pamk <- pamk(pca_vals[,c(1:numpca)], krange = 1:(nrow(pca_vals) - 1), usepam = TRUE)
pca_vals$pamk <- as.factor(pamk$pamobject$clustering)
} else {
pamk <- pamk(pca_vals[,c(1:numpca)], krange = 1:10, usepam = FALSE)
pca_vals$pamk <- as.factor(pamk$pamobject$clustering)
}
x <- pamk$pamobject$clustering
x <- pca_vals$pamk
trans <- markovchainFit(x)
mc <- new("markovchain", states = trans$estimate@states, transitionMatrix = trans$estimate@transitionMatrix, name = "traj")
mcss <- as.data.frame(cbind(trans$estimate@states,t(steadyStates(mc))))
mcss[,1] <- as.factor(mcss[,1])
colnames(mcss) <- c("Cluster", "Steady State Probabilities")
args <- ("/Users/vikram/Documents/georgetown/summer_2019/kras/mdSampling/variantSimulations/KRAS/config/KRAS.wt.kras_tree_sample_test.featureTable.csv")
options(warn=-1)
library(data.table)
library(ggplot2)
library(plotly)
library(htmlwidgets)
library(fpc)
if(length(args) == 0){
table <- fread(file = "clusterres_dihedaral_pca_coords.csv", sep = ",", data.table = FALSE, header = TRUE)
} else {
table <- fread(file = args[1], sep = ",", data.table = FALSE, header = TRUE)
}
table <- table[,colSums(table != 0) > 0]
pca <- prcomp(table[,c(-1)], scale. = TRUE)
View(table)
#pull pca and add cluster
pca_vals <- as.data.frame(pca$x)
#get 90% variance pca number
if(ncol(pca_vals) > 4) {
summary <- data.frame(summary(pca)$importance)
cumsum <- as.vector(summary[3,])
numpca <- length(cumsum[cumsum<.9])
} else {
numpca <- ncol(pca_vals)
}
View(summary)
args <- c("/Users/vikram/Documents/georgetown/summer_2019/kras/mdSampling/variantSimulations/KRAS/config/KRAS.wt.kras_tree_sample_test.featureTable.csv")
options(warn=-1)
library(data.table)
library(ggplot2)
library(plotly)
library(htmlwidgets)
library(fpc)
if(length(args) == 0){
table <- fread(file = "clusterres_dihedaral_pca_coords.csv", sep = ",", data.table = FALSE, header = TRUE)
} else {
table <- fread(file = args[1], sep = ",", data.table = FALSE, header = TRUE)
}
table <- table[,colSums(table != 0) > 0]
pca <- prcomp(table[,c(-1)], scale. = TRUE)
#pull pca and add cluster
pca_vals <- as.data.frame(pca$x)
#get 90% variance pca number
if(ncol(pca_vals) > 4) {
summary <- data.frame(summary(pca)$importance)
cumsum <- as.vector(summary[3,])
numpca <- length(cumsum[cumsum<.9])
} else {
numpca <- ncol(pca_vals)
}
#run k means on the 90% pcas and plot
#k <- kmeans(pca_vals[,c(1:numpca)], 3, nstart=25, iter.max=1000)
if (nrow(pca_vals) < 3) {
pca_vals$pamk <- as.factor(rep(1, nrow(pca_vals)))
} else if (nrow(pca_vals) < 11) {
pamk <- pamk(pca_vals[,c(1:numpca)], krange = 1:(nrow(pca_vals) - 1), usepam = TRUE)
pca_vals$pamk <- as.factor(pamk$pamobject$clustering)
} else {
pamk <- pamk(pca_vals[,c(1:numpca)], krange = 1:10, usepam = FALSE)
pca_vals$pamk <- as.factor(pamk$pamobject$clustering)
}
x <- pca_vals$pamk
p <- plot_ly(pca_vals, x=~PC1, y=~PC2, z=~PC3, color = ~pamk) %>% add_markers() %>%
layout(scene = list(xaxis = list(title = 'PC1'),
yaxis = list(title = 'PC2'),
zaxis = list(title = 'PC3')))
htmlwidgets::saveWidget(p, "/Users/vikram/Documents/georgetown/summer_2019/kras/mdSampling/variantSimulations/KRAS/results/wt/scaffold_0/cluster_figures/clustering_3d_full.html", sep = ""))
htmlwidgets::saveWidget(p, "/Users/vikram/Documents/georgetown/summer_2019/kras/mdSampling/variantSimulations/KRAS/results/wt/scaffold_0/cluster_figures/clustering_3d_full.html", sep = "")
htmlwidgets::saveWidget(p, "/Users/vikram/Documents/georgetown/summer_2019/kras/mdSampling/variantSimulations/KRAS/results/wt/scaffold_0/cluster_figures/clustering_3d_full.html")
htmlwidgets::saveWidget(p, "/Users/vikram/Documents/georgetown/summer_2019/kras/mdSampling/variantSimulations/KRAS/results/wt/scaffold_0/cluster_figures/clustering_3d_full.html", selfcontained = TRUE)
View(summary)
plot(t())
summ = t(summary)
View(summ)
plot(which(summ), summ[,2])
plot(1:1000, summ[,2])
plot(1:120, summ[1:120,2])
plot(1:40, summ[1:40,2])
plot(1:20, summ[1:20,2])
plot(1:20, summ[1:20,2])
numpca = 5
#run k means on the 90% pcas and plot
#k <- kmeans(pca_vals[,c(1:numpca)], 3, nstart=25, iter.max=1000)
if (nrow(pca_vals) < 3) {
pca_vals$pamk <- as.factor(rep(1, nrow(pca_vals)))
} else if (nrow(pca_vals) < 11) {
pamk <- pamk(pca_vals[,c(1:numpca)], krange = 1:(nrow(pca_vals) - 1), usepam = TRUE)
pca_vals$pamk <- as.factor(pamk$pamobject$clustering)
} else {
pamk <- pamk(pca_vals[,c(1:numpca)], krange = 1:10, usepam = FALSE)
pca_vals$pamk <- as.factor(pamk$pamobject$clustering)
}
p <- plot_ly(pca_vals, x=~PC1, y=~PC2, z=~PC3, color = ~pamk) %>% add_markers() %>%
layout(scene = list(xaxis = list(title = 'PC1'),
yaxis = list(title = 'PC2'),
zaxis = list(title = 'PC3')))
p
ggplot(pca_vals, aes(x=PC1, y=PC2, color=pamk)) + geom_point() +
geom_point(data = as.data.frame(pamk$pamobject$medoids), aes(x=PC1, y=PC2), colour="black", size = 5, pch = 1)
ggplot(pca_vals, aes(x=PC1, y=PC2)) + geom_point()
